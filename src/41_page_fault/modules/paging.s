;********************************************************************************
; void init_page_table()
;********************************************************************************
init_page_table:
;**** スタックフレームの構築 **** 
                            ;      0| EIP (caller)
;**** レジスタの保存 **** 
        pusha

;**** 処理の開始 ****
        ; ** 4MB分のページテーブルを構成する **
        cdecl set_4m_page, CR3_BASE

;**** レジスタの復帰 **** 
        popa

;**** スタックフレームの破棄 ****
        ret

;********************************************************************************
; void set_4m_page(base)
;********************************************************************************
set_4m_page:
;**** スタックフレームの構築 **** 
                            ;     +8| ページテーブルベースアドレス
                            ;     +4| EIP (caller)
        push ebp            ; EBP  0| EBP (old)
        mov ebp, esp

;**** レジスタの保存 **** 
        pusha

;**** 処理の開始 ****
        ; ** ページディレクトリを作成する **
        cld                     ; DFクリア
        mov edi, [ebp + 8]
        mov eax, 0x0000_0000
        mov ecx, 1024           ; ディレクトリエントリ数
    rep stosd                   ; while (ecx--) *edi++

        ; ** 先頭のエントリを作成する **
        mov eax, edi
        and eax, ~0x0000_0FFF       ; 物理アドレスの指定
        or eax, 0b0111              ; RWの許可
        mov [edi - (1024 * 4)], eax ; 先頭のエントリを割り当てる

        ; ** ページテーブルを作成する **
        mov eax, 0x0000_0007        ; 物理アドレスとRWの許可
        mov ecx, 1024               ; ページエントリ数
.LOOP:
        stosd
        add eax, 0x0000_1000
        loop .LOOP

;**** レジスタの復帰 **** 
        popa

;**** スタックフレームの破棄 ****
        mov esp, ebp
        pop ebp
        ret