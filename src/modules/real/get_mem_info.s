;********************************************************************************
; void get_mem_info(var info_buf)
;********************************************************************************
get_mem_info:
;**** スタックフレームの構築 **** 
                            ;    +4| メモリ情報バッファへのポインタ
                            ;    +2| IP (caller)
        push bp             ; BP  0| BP (old)
        mov bp, sp

;**** レジスタの保存 **** 
    push ebx
    push si

;**** 処理の開始 ****
    mov si, [bp + 4]
    mov ebx, dword 0x3FFFF
    mov [si + mem_map_buf.next], ebx

;**** レジスタの復帰 **** 
    pop si
    pop ebx

;**** スタックフレームの破棄 ****
        mov sp, bp
        pop bp
        ret

;********************************************************************************
; void put_mem_info_header()
;********************************************************************************
put_mem_info_header:
;**** スタックフレームの構築 **** 
                            ;    +2| IP (caller)
        push bp             ; BP  0| BP (old)
        mov bp, sp

;**** レジスタの保存 **** 
   
;**** 処理の開始 ****
        cdecl puts, .s1
        
;**** レジスタの復帰 **** 

;**** スタックフレームの破棄 ****
        mov sp, bp
        pop bp
        ret

.s1:    db "Base____", "_", "________"
.s2:    db "Length__", "_", "________"
.s3:    db "Type____"
.s4:    db 0x0A, 0x0D, 0

;********************************************************************************
; void put_mem_info_footer()
;********************************************************************************
put_mem_info_footer:
;**** スタックフレームの構築 **** 
                            ;    +2| IP (caller)
        push bp             ; BP  0| BP (old)
        mov bp, sp

;**** レジスタの保存 **** 
   
;**** 処理の開始 ****
        cdecl puts, .s1
        
;**** レジスタの復帰 **** 

;**** スタックフレームの破棄 ****
        mov sp, bp
        pop bp
        ret

.s1:    db "________", "_", "________"
.s2:    db "________", "_", "________"
.s3:    db "________"
.s4:    db 0x0A, 0x0D, 0
